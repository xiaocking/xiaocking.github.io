(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{641:function(t,v,_){"use strict";_.r(v);var r=_(2),a=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"regexp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#regexp"}},[t._v("#")]),t._v(" RegExp")]),t._v(" "),v("h2",{attrs:{id:"regexp-对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#regexp-对象"}},[t._v("#")]),t._v(" RegExp 对象")]),t._v(" "),v("blockquote",[v("p",[t._v("RegExp 对象表示正则表达式，它是对字符串执行模式匹配的强大工具。")])]),t._v(" "),v("h3",{attrs:{id:"创建-regexp-对象的语法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建-regexp-对象的语法"}},[t._v("#")]),t._v(" 创建 RegExp 对象的语法")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接量语法")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("pattern"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("attributes\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 RegExp 对象的语法：")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attributes"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("h3",{attrs:{id:"参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),v("p",[t._v("参数 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式。")]),t._v(" "),v("p",[t._v('参数 attributes 是一个可选的字符串，包含属性 "g"、"i" 和 "m"，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。如果 pattern 是正则表达式，而不是字符串，则必须省略该参数。')]),t._v(" "),v("h3",{attrs:{id:"返回值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),v("p",[t._v("一个新的 RegExp 对象，具有指定的模式和标志。如果参数 pattern 是正则表达式而不是字符串，那么 RegExp() 构造函数将用与指定的 RegExp 相同的模式和标志创建一个新的 RegExp 对象。")]),t._v(" "),v("p",[t._v("如果不用 new 运算符，而将 RegExp() 作为函数调用，那么它的行为与用 new 运算符调用时一样，只是当 pattern 是正则表达式时，它只返回 pattern，而不再创建一个新的 RegExp 对象。")]),t._v(" "),v("h3",{attrs:{id:"抛出"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#抛出"}},[t._v("#")]),t._v(" 抛出")]),t._v(" "),v("p",[v("strong",[t._v("SyntaxError")]),t._v(' - 如果 pattern 不是合法的正则表达式，或 attributes 含有 "g"、"i" 和 "m" 之外的字符，抛出该异常。')]),t._v(" "),v("p",[v("strong",[t._v("TypeError")]),t._v(" - 如果 pattern 是 RegExp 对象，但没有省略 attributes 参数，抛出该异常。")]),t._v(" "),v("h2",{attrs:{id:"修饰符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("修饰符")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("i")]),t._v(" "),v("td",[t._v("执行对大小写不敏感的匹配。")])]),t._v(" "),v("tr",[v("td",[t._v("g")]),t._v(" "),v("td",[t._v("执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。")])]),t._v(" "),v("tr",[v("td",[t._v("m")]),t._v(" "),v("td",[t._v("执行多行匹配。")])])])]),t._v(" "),v("h2",{attrs:{id:"方括号"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方括号"}},[t._v("#")]),t._v(" 方括号")]),t._v(" "),v("p",[t._v("方括号用于查找某个范围内的字符：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("表达式")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("[abc]")]),t._v(" "),v("td",[t._v("查找方括号之间的任何字符。")])]),t._v(" "),v("tr",[v("td",[t._v("[^abc]")]),t._v(" "),v("td",[t._v("查找任何不在方括号之间的字符。")])]),t._v(" "),v("tr",[v("td",[t._v("[0-9]")]),t._v(" "),v("td",[t._v("查找任何从 0 至 9 的数字。")])]),t._v(" "),v("tr",[v("td",[t._v("[a-z]")]),t._v(" "),v("td",[t._v("查找任何从小写 a 到小写 z 的字符。")])]),t._v(" "),v("tr",[v("td",[t._v("[A-Z]")]),t._v(" "),v("td",[t._v("查找任何从大写 A 到大写 Z 的字符。")])]),t._v(" "),v("tr",[v("td",[t._v("[A-z]")]),t._v(" "),v("td",[t._v("查找任何从大写 A 到小写 z 的字符。")])]),t._v(" "),v("tr",[v("td",[t._v("[adgk]")]),t._v(" "),v("td",[t._v("查找给定集合内的任何字符。")])]),t._v(" "),v("tr",[v("td",[t._v("[^adgk]")]),t._v(" "),v("td",[t._v("查找给定集合外的任何字符。")])]),t._v(" "),v("tr",[v("td",[t._v("(red")]),t._v(" "),v("td",[t._v("blue")])])])]),t._v(" "),v("h2",{attrs:{id:"元字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),v("p",[t._v("元字符（Metacharacter）是拥有特殊含义的字符：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("表达式")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v(".")]),t._v(" "),v("td",[t._v("查找单个字符，除了换行和行结束符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\w")]),t._v(" "),v("td",[t._v("查找单词字符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\W")]),t._v(" "),v("td",[t._v("查找非单词字符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\d")]),t._v(" "),v("td",[t._v("查找数字。")])]),t._v(" "),v("tr",[v("td",[t._v("\\D")]),t._v(" "),v("td",[t._v("查找非数字字符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\s")]),t._v(" "),v("td",[t._v("查找空白字符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\S")]),t._v(" "),v("td",[t._v("查找非空白字符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\b")]),t._v(" "),v("td",[t._v("匹配单词边界。")])]),t._v(" "),v("tr",[v("td",[t._v("\\B")]),t._v(" "),v("td",[t._v("匹配非单词边界。")])]),t._v(" "),v("tr",[v("td",[t._v("\\0")]),t._v(" "),v("td",[t._v("查找 NUL 字符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\n")]),t._v(" "),v("td",[t._v("查找换行符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\f")]),t._v(" "),v("td",[t._v("查找换页符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\r")]),t._v(" "),v("td",[t._v("查找回车符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\t")]),t._v(" "),v("td",[t._v("查找制表符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\v")]),t._v(" "),v("td",[t._v("查找垂直制表符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\xxx")]),t._v(" "),v("td",[t._v("查找以八进制数 xxx 规定的字符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\xdd")]),t._v(" "),v("td",[t._v("查找以十六进制数 dd 规定的字符。")])]),t._v(" "),v("tr",[v("td",[t._v("\\uxxxx")]),t._v(" "),v("td",[t._v("查找以十六进制数 xxxx 规定的 Unicode 字符。")])])])]),t._v(" "),v("h2",{attrs:{id:"量词"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("量词")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("n+")]),t._v(" "),v("td",[t._v("匹配任何包含至少一个 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("n*")]),t._v(" "),v("td",[t._v("匹配任何包含零个或多个 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("n?")]),t._v(" "),v("td",[t._v("匹配任何包含零个或一个 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("n{X}")]),t._v(" "),v("td",[t._v("匹配包含 X 个 n 的序列的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("n{X,Y}")]),t._v(" "),v("td",[t._v("匹配包含 X 至 Y 个 n 的序列的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("n{X,}")]),t._v(" "),v("td",[t._v("匹配包含至少 X 个 n 的序列的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("n$")]),t._v(" "),v("td",[t._v("匹配任何结尾为 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("^n")]),t._v(" "),v("td",[t._v("匹配任何开头为 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("?=n")]),t._v(" "),v("td",[t._v("匹配任何其后紧接指定字符串 n 的字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("?!n")]),t._v(" "),v("td",[t._v("匹配任何其后没有紧接指定字符串 n 的字符串。")])])])]),t._v(" "),v("h2",{attrs:{id:"regexp-对象属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#regexp-对象属性"}},[t._v("#")]),t._v(" RegExp 对象属性")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("global")]),t._v(" "),v("td",[t._v("RegExp 对象是否具有标志 g。")])]),t._v(" "),v("tr",[v("td",[t._v("ignoreCase")]),t._v(" "),v("td",[t._v("RegExp 对象是否具有标志 i。")])]),t._v(" "),v("tr",[v("td",[t._v("lastIndex")]),t._v(" "),v("td",[t._v("一个整数，标示开始下一次匹配的字符位置。")])]),t._v(" "),v("tr",[v("td",[t._v("multiline")]),t._v(" "),v("td",[t._v("RegExp 对象是否具有标志 m。")])]),t._v(" "),v("tr",[v("td",[t._v("source")]),t._v(" "),v("td",[t._v("正则表达式的源文本。")])])])]),t._v(" "),v("h2",{attrs:{id:"regexp-对象方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#regexp-对象方法"}},[t._v("#")]),t._v(" RegExp 对象方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("compile")]),t._v(" "),v("td",[t._v("编译正则表达式。")])]),t._v(" "),v("tr",[v("td",[t._v("exec")]),t._v(" "),v("td",[t._v("检索字符串中指定的值。返回找到的值，并确定其位置。")])]),t._v(" "),v("tr",[v("td",[t._v("test")]),t._v(" "),v("td",[t._v("检索字符串中指定的值。返回 true 或 false。")])])])]),t._v(" "),v("h2",{attrs:{id:"支持正则表达式的-string-对象的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#支持正则表达式的-string-对象的方法"}},[t._v("#")]),t._v(" 支持正则表达式的 String 对象的方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("search")]),t._v(" "),v("td",[t._v("检索与正则表达式相匹配的值。")])]),t._v(" "),v("tr",[v("td",[t._v("match")]),t._v(" "),v("td",[t._v("找到一个或多个正则表达式的匹配。")])]),t._v(" "),v("tr",[v("td",[t._v("replace")]),t._v(" "),v("td",[t._v("替换与正则表达式匹配的子串。")])]),t._v(" "),v("tr",[v("td",[t._v("split")]),t._v(" "),v("td",[t._v("把字符串分割为字符串数组。")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);