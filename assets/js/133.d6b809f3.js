(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{637:function(t,v,a){"use strict";a.r(v);var _=a(2),r=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"global"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#global"}},[t._v("#")]),t._v(" Global")]),t._v(" "),v("h2",{attrs:{id:"global-描述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#global-描述"}},[t._v("#")]),t._v(" Global 描述")]),t._v(" "),v("p",[t._v("全局属性和函数可用于所有内建的 JavaScript 对象。")]),t._v(" "),v("p",[t._v("全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全局对象不是任何对象的属性，所以它没有名称。")]),t._v(" "),v("p",[t._v("在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。但通常不必用这种方式引用全局对象，因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。")]),t._v(" "),v("p",[t._v("全局对象只是一个对象，而不是类。既没有构造函数，也无法实例化一个新的全局对象。")]),t._v(" "),v("p",[t._v("在 JavaScript 代码嵌入一个特殊环境中时，全局对象通常具有环境特定的属性。实际上，ECMAScript 标准没有规定全局对象的类型，JavaScript 的实现或嵌入的 JavaScript 都可以把任意类型的对象作为全局对象，只要该对象定义了这里列出的基本属性和函数。例如，在允许通过 LiveConnect 或相关的技术来脚本化 Java 的 JavaScript 实现中，全局对象被赋予了这里列出的 java 和 Package 属性以及 getClass() 方法。而在客户端 JavaScript 中，全局对象就是 Window 对象，表示允许 JavaScript 代码的 Web 浏览器窗口。")]),t._v(" "),v("h2",{attrs:{id:"global-属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#global-属性"}},[t._v("#")]),t._v(" Global 属性")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("属性")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Infinity")]),t._v(" "),v("td",[t._v("代表正的无穷大的数值。")])]),t._v(" "),v("tr",[v("td",[t._v("java")]),t._v(" "),v("td",[t._v("代表 java.* 包层级的一个 JavaPackage。")])]),t._v(" "),v("tr",[v("td",[t._v("NaN")]),t._v(" "),v("td",[t._v("指示某个值是不是数字值。")])]),t._v(" "),v("tr",[v("td",[t._v("Packages")]),t._v(" "),v("td",[t._v("根 JavaPackage 对象。")])]),t._v(" "),v("tr",[v("td",[t._v("undefined")]),t._v(" "),v("td",[t._v("指示未定义的值。")])])])]),t._v(" "),v("h2",{attrs:{id:"global-方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#global-方法"}},[t._v("#")]),t._v(" Global 方法")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("方法")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("decodeURI()")]),t._v(" "),v("td",[t._v("解码某个编码的 URI。")])]),t._v(" "),v("tr",[v("td",[t._v("decodeURIComponent()")]),t._v(" "),v("td",[t._v("解码一个编码的 URI 组件。")])]),t._v(" "),v("tr",[v("td",[t._v("encodeURI()")]),t._v(" "),v("td",[t._v("把字符串编码为 URI。")])]),t._v(" "),v("tr",[v("td",[t._v("encodeURIComponent()")]),t._v(" "),v("td",[t._v("把字符串编码为 URI 组件。")])]),t._v(" "),v("tr",[v("td",[t._v("escape()")]),t._v(" "),v("td",[t._v("对字符串进行编码。")])]),t._v(" "),v("tr",[v("td",[t._v("eval()")]),t._v(" "),v("td",[t._v("计算 JavaScript 字符串，并把它作为脚本代码来执行。")])]),t._v(" "),v("tr",[v("td",[t._v("getClass()")]),t._v(" "),v("td",[t._v("返回一个 JavaObject 的 JavaClass。")])]),t._v(" "),v("tr",[v("td",[t._v("isFinite()")]),t._v(" "),v("td",[t._v("检查某个值是否为有穷大的数。")])]),t._v(" "),v("tr",[v("td",[t._v("isNaN()")]),t._v(" "),v("td",[t._v("检查某个值是否是数字。")])]),t._v(" "),v("tr",[v("td",[t._v("Number()")]),t._v(" "),v("td",[t._v("把对象的值转换为数字。")])]),t._v(" "),v("tr",[v("td",[t._v("parseFloat()")]),t._v(" "),v("td",[t._v("解析一个字符串并返回一个浮点数。")])]),t._v(" "),v("tr",[v("td",[t._v("parseInt()")]),t._v(" "),v("td",[t._v("解析一个字符串并返回一个整数。")])]),t._v(" "),v("tr",[v("td",[t._v("String()")]),t._v(" "),v("td",[t._v("把对象的值转换为字符串。")])]),t._v(" "),v("tr",[v("td",[t._v("unescape()")]),t._v(" "),v("td",[t._v("对由 escape() 编码的字符串进行解码。")])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);