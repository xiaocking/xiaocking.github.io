(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{661:function(t,s,a){"use strict";a.r(s);var e=a(2),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"typescript-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-模块"}},[t._v("#")]),t._v(" TypeScript 模块")]),t._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("任何包含 import 或 export 语句的文件，就是一个模块（module）。相应地，如果文件不包含 export 语句，就是一个全局的脚本文件。")]),t._v(" "),s("p",[t._v("模块本身就是一个作用域，不属于全局作用域。模块内部的变量、函数、类只在内部可见，对于模块外部是不可见的。暴露给外部的接口，必须用 export 命令声明；如果其他文件要使用模块的接口，必须用 import 命令来输入。")]),t._v(" "),s("p",[t._v("如果一个文件不包含 export 语句，但是希望把它当作一个模块（即内部变量对外不可见），可以在脚本头部添加一行语句。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面这行语句不产生任何实际作用，但会让当前文件被当作模块处理，所有它的代码都变成了内部代码。")]),t._v(" "),s("p",[t._v("ES 模块的详细介绍，请参考 ES6 教程，这里就不重复了。本章主要介绍 TypeScript 的模块处理。")]),t._v(" "),s("p",[t._v("TypeScript 模块除了支持所有 ES 模块的语法，特别之处在于允许输出和输入类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，当前脚本输出一个类型别名"),s("code",[t._v("Bool")]),t._v("。这行语句把类型定义和接口输出写在一行，也可以写成两行。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Bool "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("假定上面的模块文件为"),s("code",[t._v("a.ts")]),t._v("，另一个文件"),s("code",[t._v("b.ts")]),t._v("就可以使用 import 语句，输入这个类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Bool "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Bool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，import 语句加载的是一个类型。注意，加载文件写成"),s("code",[t._v("./a")]),t._v("，没有写脚本文件的后缀名。TypeScript 允许加载模块时，省略模块文件的后缀名，它会自动定位，将"),s("code",[t._v("./a")]),t._v("定位到"),s("code",[t._v("./a.ts")]),t._v("。")]),t._v(" "),s("p",[t._v("编译时，可以两个脚本同时编译。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc a.ts b.ts\n")])])]),s("p",[t._v("上面命令会将"),s("code",[t._v("a.ts")]),t._v("和"),s("code",[t._v("b.ts")]),t._v("分别编译成"),s("code",[t._v("a.js")]),t._v("和"),s("code",[t._v("b.js")]),t._v("。")]),t._v(" "),s("p",[t._v("也可以只编译"),s("code",[t._v("b.ts")]),t._v("，因为它是入口脚本，tsc 会自动编译它依赖的所有脚本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc b.ts\n")])])]),s("p",[t._v("上面命令发现"),s("code",[t._v("b.ts")]),t._v("依赖"),s("code",[t._v("a.ts")]),t._v("，就会自动寻找"),s("code",[t._v("a.ts")]),t._v("，也将其同时编译，因此编译产物还是"),s("code",[t._v("a.js")]),t._v("和"),s("code",[t._v("b.js")]),t._v("两个文件。")]),t._v(" "),s("p",[t._v("如果想将"),s("code",[t._v("a.ts")]),t._v("和"),s("code",[t._v("b.ts")]),t._v("编译成一个文件，可以使用"),s("code",[t._v("--outFile")]),t._v("参数。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("$ tsc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("outFile result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ts\n")])])]),s("p",[t._v("上面示例将"),s("code",[t._v("a.ts")]),t._v("和"),s("code",[t._v("b.ts")]),t._v("合并编译为"),s("code",[t._v("result.js")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"import-type-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-type-语句"}},[t._v("#")]),t._v(" import type 语句")]),t._v(" "),s("p",[t._v("import 在一条语句中，可以同时输入类型和正常接口。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a.ts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b.ts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，文件"),s("code",[t._v("a.ts")]),t._v("的 export 语句输出了一个类型"),s("code",[t._v("A")]),t._v("和一个正常接口"),s("code",[t._v("a")]),t._v("，另一个文件"),s("code",[t._v("b.ts")]),t._v("则在同一条语句中输入了类型和正常接口。")]),t._v(" "),s("p",[t._v("这样很不利于区分类型和正常接口，容易造成混淆。为了解决这个问题，TypeScript 引入了两个解决方法。")]),t._v(" "),s("p",[t._v("第一个方法是在 import 语句输入的类型前面加上"),s("code",[t._v("type")]),t._v("关键字。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，import 语句输入的类型"),s("code",[t._v("A")]),t._v("前面有"),s("code",[t._v("type")]),t._v("关键字，表示这是一个类型。")]),t._v(" "),s("p",[t._v("第二个方法是使用 import type 语句，这个语句只能输入类型，不能输入正常接口。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，import type 输入类型"),s("code",[t._v("A")]),t._v("是正确的，但是输入正常接口"),s("code",[t._v("a")]),t._v("就会报错。")]),t._v(" "),s("p",[t._v("import type 语句也可以输入默认类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultType")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'moduleA'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("import type 在一个名称空间下，输入所有类型的写法如下。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" TypeNS "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'moduleA'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("同样的，export 语句也有两种方法，表示输出的是类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，方法一是使用"),s("code",[t._v("type")]),t._v("关键字作为前缀，表示输出的是类型；方法二是使用 export type 语句，表示整行输出的都是类型。")]),t._v(" "),s("p",[t._v("下面是 export type 将一个类作为类型输出的例子。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Point "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，由于使用了 export type 语句，输出的并不是 Point 这个类，而是 Point 代表的实例类型。输入时，只能作为类型输入。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Point "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./module'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Point "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("Point")]),t._v("只能作为类型输入，不能当作正常接口使用。")]),t._v(" "),s("h2",{attrs:{id:"importsnotusedasvalues-编译设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#importsnotusedasvalues-编译设置"}},[t._v("#")]),t._v(" importsNotUsedAsValues 编译设置")]),t._v(" "),s("p",[t._v("TypeScript 特有的输入类型（type）的 import 语句，编译成 JavaScript 时怎么处理呢？")]),t._v(" "),s("p",[t._v("TypeScript 提供了"),s("code",[t._v("importsNotUsedAsValues")]),t._v("编译设置项，有三个可能的值。")]),t._v(" "),s("p",[t._v("（1）"),s("code",[t._v("remove")]),t._v("：这是默认值，自动删除输入类型的 import 语句。")]),t._v(" "),s("p",[t._v("（2）"),s("code",[t._v("preserve")]),t._v("：保留输入类型的 import 语句。")]),t._v(" "),s("p",[t._v("（3）"),s("code",[t._v("error")]),t._v("：保留输入类型的 import 语句（与"),s("code",[t._v("preserve")]),t._v("相同），但是必须写成"),s("code",[t._v("import type")]),t._v("的形式，否则报错。")]),t._v(" "),s("p",[t._v("请看示例，下面是一个输入类型的 import 语句。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" TypeA "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("TypeA")]),t._v("是一个类型。")]),t._v(" "),s("p",[s("code",[t._v("remove")]),t._v("的编译结果会将该语句删掉。")]),t._v(" "),s("p",[s("code",[t._v("preserve")]),t._v("的编译结果会保留该语句，但会删掉其中涉及类型的部分。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面就是"),s("code",[t._v("preserve")]),t._v("的编译结果，可以看到编译后的"),s("code",[t._v("import")]),t._v("语句不从"),s("code",[t._v("a.js")]),t._v("输入任何接口（包括类型），但是会引发"),s("code",[t._v("a.js")]),t._v("的执行，因此会保留"),s("code",[t._v("a.js")]),t._v("里面的副作用。")]),t._v(" "),s("p",[s("code",[t._v("error")]),t._v("的编译结果与"),s("code",[t._v("preserve")]),t._v("相同，但在编译过程中会报错，因为它要求输入类型的"),s("code",[t._v("import")]),t._v("语句必须写成"),s("code",[t._v("import type")]),t._v(" 的形式。原始语句改成下面的形式，就不会报错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" TypeA "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"commonjs-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块"}},[t._v("#")]),t._v(" CommonJS 模块")]),t._v(" "),s("p",[t._v("CommonJS 是 Node.js 的专用模块格式，与 ES 模块格式不兼容。")]),t._v(" "),s("h3",{attrs:{id:"import-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-语句"}},[t._v("#")]),t._v(" import = 语句")]),t._v(" "),s("p",[t._v("TypeScript 使用"),s("code",[t._v("import =")]),t._v("语句输入 CommonJS 模块。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello.ts'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，使用"),s("code",[t._v("import =")]),t._v("语句和"),s("code",[t._v("require()")]),t._v("命令输入了一个 CommonJS 模块。模块本身的用法跟 Node.js 是一样的。")]),t._v(" "),s("p",[t._v("除了使用"),s("code",[t._v("import =")]),t._v("语句，TypeScript 还允许使用"),s("code",[t._v('import * as [接口名] from "模块文件"')]),t._v("输入 CommonJS 模块。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" fs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"export-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#export-语句"}},[t._v("#")]),t._v(" export = 语句")]),t._v(" "),s("p",[t._v("TypeScript 使用"),s("code",[t._v("export =")]),t._v("语句，输出 CommonJS 模块的对象，等同于 CommonJS 的"),s("code",[t._v("module.exports")]),t._v("对象。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("export =")]),t._v("语句输出的对象，只能使用"),s("code",[t._v("import =")]),t._v("语句加载。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n")])])]),s("h2",{attrs:{id:"模块定位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块定位"}},[t._v("#")]),t._v(" 模块定位")]),t._v(" "),s("p",[t._v("模块定位（module resolution）指的是确定 import 语句和 export 语句里面的模块文件位置。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" TypeA "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，TypeScript 怎么确定"),s("code",[t._v("./a")]),t._v("到底是指哪一个模块，这就叫做“模块定位”。")]),t._v(" "),s("p",[t._v("模块定位有两种方法，一种称为 Classic 方法，另一种称为 Node 方法。可以使用编译参数"),s("code",[t._v("moduleResolution")]),t._v("，指定使用哪一种方法。")]),t._v(" "),s("p",[t._v("没有指定定位方法时，就看原始脚本采用什么模块格式。如果模块格式是 CommonJS（即编译时指定"),s("code",[t._v("--module commonjs")]),t._v("），那么模块定位采用 Node 方法，否则采用 Classic 方法（模块格式为 es2015、 esnext、amd, system, umd 等等）。")]),t._v(" "),s("h3",{attrs:{id:"相对模块-非相对模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相对模块-非相对模块"}},[t._v("#")]),t._v(" 相对模块，非相对模块")]),t._v(" "),s("p",[t._v("加载模块时，目标模块分为相对模块（relative import）和非相对模块两种（non-relative import）。")]),t._v(" "),s("p",[t._v("相对模块指的是路径以"),s("code",[t._v("/")]),t._v("、"),s("code",[t._v("./")]),t._v("、"),s("code",[t._v("../")]),t._v("开头的模块。下面 import 语句加载的模块，都是相对模块。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v('import Entry from "./components/Entry";')])]),t._v(" "),s("li",[s("code",[t._v('import { DefaultHeaders } from "../constants/http";')])]),t._v(" "),s("li",[s("code",[t._v('import "/mod";')])])]),t._v(" "),s("p",[t._v("非相对模块指的是不带有路径信息的模块。下面 import 语句加载的模块，都是非相对模块。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v('import * as $ from "jquery";')])]),t._v(" "),s("li",[s("code",[t._v('import { Component } from "@angular/core";')])])]),t._v(" "),s("h3",{attrs:{id:"classic-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classic-方法"}},[t._v("#")]),t._v(" Classic 方法")]),t._v(" "),s("p",[t._v("Classic 方法以当前脚本的路径作为“基准路径”，计算相对模块的位置。比如，脚本"),s("code",[t._v("a.ts")]),t._v("里面有一行代码"),s("code",[t._v('import { b } from "./b"')]),t._v("，那么 TypeScript 就会在"),s("code",[t._v("a.ts")]),t._v("所在的目录，查找"),s("code",[t._v("b.ts")]),t._v("和"),s("code",[t._v("b.d.ts")]),t._v("。")]),t._v(" "),s("p",[t._v("至于非相对模块，也是以当前脚本的路径作为起点，一层层查找上级目录。比如，脚本"),s("code",[t._v("a.ts")]),t._v("里面有一行代码"),s("code",[t._v('import { b } from "b"')]),t._v("，那么就会查找"),s("code",[t._v("b.ts")]),t._v("和"),s("code",[t._v("b.d.ts")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"node-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-方法"}},[t._v("#")]),t._v(" Node 方法")]),t._v(" "),s("p",[t._v("Node 方法就是模拟 Node.js 的模块加载方法。")]),t._v(" "),s("p",[t._v("相对模块依然是以当前脚本的路径作为“基准路径”。比如，脚本文件"),s("code",[t._v("a.ts")]),t._v("里面有一行代码"),s("code",[t._v('let x = require("./b");')]),t._v("，TypeScript 按照以下顺序查找。")]),t._v(" "),s("ol",[s("li",[t._v("当前目录是否包含"),s("code",[t._v("b.ts")]),t._v("、"),s("code",[t._v("b.tsx")]),t._v("、"),s("code",[t._v("b.d.ts")]),t._v("。")]),t._v(" "),s("li",[t._v("当前目录是否有子目录"),s("code",[t._v("b")]),t._v("，该子目录是否存在文件"),s("code",[t._v("package.json")]),t._v("，该文件的"),s("code",[t._v("types")]),t._v("字段是否指定了入口文件，如果是的就加载该文件。")]),t._v(" "),s("li",[t._v("当前目录的子目录"),s("code",[t._v("b")]),t._v("是否包含"),s("code",[t._v("index.ts")]),t._v("、"),s("code",[t._v("index.tsx")]),t._v("、"),s("code",[t._v("index.d.ts")]),t._v("。")])]),t._v(" "),s("p",[t._v("非相对模块则是以当前脚本的路径作为起点，逐级向上层目录查找是否存在子目录"),s("code",[t._v("node_modules")]),t._v("。比如，脚本文件"),s("code",[t._v("a.js")]),t._v("有一行"),s("code",[t._v('let x = require("b");')]),t._v("，TypeScript 按照以下顺序进行查找。")]),t._v(" "),s("ol",[s("li",[t._v("当前目录的子目录"),s("code",[t._v("node_modules")]),t._v("是否包含"),s("code",[t._v("b.ts")]),t._v("、"),s("code",[t._v("b.tsx")]),t._v("、"),s("code",[t._v("b.d.ts")]),t._v("。")]),t._v(" "),s("li",[t._v("当前目录的子目录"),s("code",[t._v("node_modules")]),t._v("，是否存在文件"),s("code",[t._v("package.json")]),t._v("，该文件的"),s("code",[t._v("types")]),t._v("字段是否指定了入口文件，如果是的就加载该文件。")]),t._v(" "),s("li",[t._v("当前目录的子目录"),s("code",[t._v("node_modules")]),t._v("里面，是否包含子目录"),s("code",[t._v("@types")]),t._v("，在该目录中查找文件"),s("code",[t._v("b.d.ts")]),t._v("。")]),t._v(" "),s("li",[t._v("当前目录的子目录"),s("code",[t._v("node_modules")]),t._v("里面，是否包含子目录"),s("code",[t._v("b")]),t._v("，在该目录中查找"),s("code",[t._v("index.ts")]),t._v("、"),s("code",[t._v("index.tsx")]),t._v("、"),s("code",[t._v("index.d.ts")]),t._v("。")]),t._v(" "),s("li",[t._v("进入上一层目录，重复上面4步，直到找到为止。")])]),t._v(" "),s("h3",{attrs:{id:"路径映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径映射"}},[t._v("#")]),t._v(" 路径映射")]),t._v(" "),s("p",[t._v("TypeScript 允许开发者在"),s("code",[t._v("tsconfig.json")]),t._v("文件里面，手动指定脚本模块的路径。")]),t._v(" "),s("p",[t._v("（1）baseUrl")]),t._v(" "),s("p",[s("code",[t._v("baseUrl")]),t._v("字段可以手动指定脚本模块的基准目录。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"compilerOptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"baseUrl"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("baseUrl")]),t._v("是一个点，表示基准目录就是"),s("code",[t._v("tsconfig.json")]),t._v("所在的目录。")]),t._v(" "),s("p",[t._v("（2）paths")]),t._v(" "),s("p",[s("code",[t._v("paths")]),t._v("字段指定非相对路径的模块与实际脚本的映射。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"compilerOptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"baseUrl"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"paths"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"jquery"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node_modules/jquery/dist/jquery"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面示例中，加载模块"),s("code",[t._v("jquery")]),t._v("时，实际加载的脚本是"),s("code",[t._v("node_modules/jquery/dist/jquery")]),t._v("，它的位置要根据"),s("code",[t._v("baseUrl")]),t._v("字段计算得到。")]),t._v(" "),s("p",[t._v("注意，上例的"),s("code",[t._v("jquery")]),t._v("属性的值是一个数组，可以指定多个路径。如果第一个脚本路径不存在，那么就加载第二个路径，以此类推。")]),t._v(" "),s("p",[t._v("（3）rootDirs")]),t._v(" "),s("p",[s("code",[t._v("rootDirs")]),t._v("字段指定模块定位时必须查找的其他目录。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"compilerOptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"rootDirs"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src/zh"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src/de"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src/#{locale}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("rootDirs")]),t._v("指定了模块定位时，需要查找的不同的国际化目录。")]),t._v(" "),s("h3",{attrs:{id:"tsc-的-traceresolution参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tsc-的-traceresolution参数"}},[t._v("#")]),t._v(" tsc 的"),s("code",[t._v("--traceResolution")]),t._v("参数")]),t._v(" "),s("p",[t._v("由于模块定位的过程很复杂，tsc 命令有一个"),s("code",[t._v("--traceResolution")]),t._v("参数，能够在编译时在命令行显示模块定位的每一步。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--traceResolution")]),t._v("\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("traceResolution")]),t._v("会输出模块定位的判断过程。")]),t._v(" "),s("h3",{attrs:{id:"tsc-的-noresolve参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tsc-的-noresolve参数"}},[t._v("#")]),t._v(" tsc 的"),s("code",[t._v("--noResolve")]),t._v("参数")]),t._v(" "),s("p",[t._v("tsc 命令的"),s("code",[t._v("--noResolve")]),t._v("参数，表示模块定位时，只考虑在命令行传入的模块。")]),t._v(" "),s("p",[t._v("举例来说，"),s("code",[t._v("app.ts")]),t._v("包含如下两行代码。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"moduleA"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"moduleB"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("使用下面的命令进行编译。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc app.ts moduleA.ts "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--noResolve")]),t._v("\n")])])]),s("p",[t._v("上面命令使用"),s("code",[t._v("--noResolve")]),t._v("参数，因此可以定位到"),s("code",[t._v("moduleA.ts")]),t._v("，因为它从命令行传入了；无法定位到"),s("code",[t._v("moduleB")]),t._v("，因为它没有传入，因此会报错。")]),t._v(" "),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://blog.51cto.com/u_13028258/5754309",target:"_blank",rel:"noopener noreferrer"}},[t._v("tsconfig 之 importsNotUsedAsValues 属性"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);