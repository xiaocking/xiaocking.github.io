(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{640:function(t,a,s){"use strict";s.r(a);var r=s(2),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("h2",{attrs:{id:"number-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-对象"}},[t._v("#")]),t._v(" Number 对象")]),t._v(" "),a("blockquote",[a("p",[t._v("Number 对象是原始数值的包装对象。")])]),t._v(" "),a("h3",{attrs:{id:"创建-number-对象的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-number-对象的语法"}},[t._v("#")]),t._v(" 创建 Number 对象的语法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myNum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myNum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),a("p",[t._v("参数 value 是要创建的 Number 对象的数值，或是要转换成数字的值。")]),t._v(" "),a("h3",{attrs:{id:"返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),a("p",[t._v("当 Number() 和运算符 new 一起作为构造函数使用时，它返回一个新创建的 Number 对象。如果不用 new 运算符，把 Number() 作为一个函数来调用，它将把自己的参数转换成一个原始的数值，并且返回这个值（如果转换失败，则返回 NaN）。")]),t._v(" "),a("h2",{attrs:{id:"number-对象描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-对象描述"}},[t._v("#")]),t._v(" Number 对象描述")]),t._v(" "),a("p",[t._v("在 JavaScript 中，数字是一种基本的数据类型。JavaScript 还支持 Number 对象，该对象是原始数值的包装对象。在必要时，JavaScript 会自动地在原始数据和对象之间转换。在 JavaScript 1.1 中，可以用构造函数 Number() 明确地创建一个 Number 对象，尽管这样做并没有什么必要。")]),t._v(" "),a("p",[t._v("构造函数 Number() 可以不与运算符 new 一起使用，而直接作为转化函数来使用。以这种方式调用 Number() 时，它会把自己的参数转化成一个数字，然后返回转换后的原始数值（或 NaN）。")]),t._v(" "),a("p",[t._v("构造函数通常还用作 5 个有用的数字常量的占位符，这 5 个有用的数字常量分别是可表示的最大数、可表示的最小数、正无穷大、负无穷大和特殊的 NaN 值。 注意，这些值是构造函数 Number() 自身的属性，而不是单独的某个 Number 对象的属性。")]),t._v(" "),a("p",[t._v("比如这样使用属性 MAX_VALUE 是正确的：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" big "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v("\n")])])]),a("p",[t._v("但是这样是错误的：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" big "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v("\n")])])]),a("p",[t._v("作为比较，我们看一下 toString() 和 Number 对象的其他方法，它们是每个 Number 对象的方法，而不是 Number() 构造函数的方法。前面提到过，在必要时，JavaScript 会自动地把原始数值转化成 Number 对象，调用 Number 方法的既可以是 Number 对象，也可以是原始数字值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" binary_value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"number-对象属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-对象属性"}},[t._v("#")]),t._v(" Number 对象属性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("constructor")]),t._v(" "),a("td",[t._v("返回对创建此对象的数组函数的引用。")])]),t._v(" "),a("tr",[a("td",[t._v("MAX_VALUE")]),t._v(" "),a("td",[t._v("可表示的最大的数。")])]),t._v(" "),a("tr",[a("td",[t._v("MIN_VALUE")]),t._v(" "),a("td",[t._v("可表示的最小的数。")])]),t._v(" "),a("tr",[a("td",[t._v("NaN")]),t._v(" "),a("td",[t._v("非数字值。")])]),t._v(" "),a("tr",[a("td",[t._v("NEGATIVE_INFINITY")]),t._v(" "),a("td",[t._v("负无穷大，溢出时返回该值。")])]),t._v(" "),a("tr",[a("td",[t._v("POSITIVE_INFINITY")]),t._v(" "),a("td",[t._v("正无穷大，溢出时返回该值。")])]),t._v(" "),a("tr",[a("td",[t._v("prototype")]),t._v(" "),a("td",[t._v("使您有能力向对象添加属性和方法。")])])])]),t._v(" "),a("h2",{attrs:{id:"number-对象方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-对象方法"}},[t._v("#")]),t._v(" Number 对象方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("toString()")]),t._v(" "),a("td",[t._v("把逻辑值转换为字符串，并返回结果。")])]),t._v(" "),a("tr",[a("td",[t._v("valueOf()")]),t._v(" "),a("td",[t._v("返回 Boolean 对象的原始值。")])]),t._v(" "),a("tr",[a("td",[t._v("toLocaleString()")]),t._v(" "),a("td",[t._v("把数字转换为字符串，使用本地数字格式顺序。")])]),t._v(" "),a("tr",[a("td",[t._v("toFixed()")]),t._v(" "),a("td",[t._v("把数字转换为字符串，结果的小数点后有指定位数的数字。")])]),t._v(" "),a("tr",[a("td",[t._v("toExponential()")]),t._v(" "),a("td",[t._v("把对象的值转换为指数计数法。")])]),t._v(" "),a("tr",[a("td",[t._v("toPrecision()")]),t._v(" "),a("td",[t._v("把数字格式化为指定的长度。")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);