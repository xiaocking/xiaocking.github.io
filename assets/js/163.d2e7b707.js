(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{670:function(v,_,e){"use strict";e.r(_);var o=e(2),t=Object(o.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"tsc-命令行编译器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tsc-命令行编译器"}},[v._v("#")]),v._v(" tsc 命令行编译器")]),v._v(" "),_("h2",{attrs:{id:"简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[v._v("#")]),v._v(" 简介")]),v._v(" "),_("p",[v._v("tsc 是 TypeScript 官方的命令行编译器，用来检查代码，并将其编译成 JavaScript 代码。")]),v._v(" "),_("p",[v._v("tsc 默认使用当前目录下的配置文件"),_("code",[v._v("tsconfig.json")]),v._v("，但也可以接受独立的命令行参数。命令行参数会覆盖"),_("code",[v._v("tsconfig.json")]),v._v("，比如命令行指定了所要编译的文件，那么 tsc 就会忽略"),_("code",[v._v("tsconfig.json")]),v._v("的"),_("code",[v._v("files")]),v._v("属性。")]),v._v(" "),_("p",[v._v("tsc 的基本用法如下。")]),v._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 使用 tsconfig.json 的配置")]),v._v("\n$ tsc\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 只编译 index.ts")]),v._v("\n$ tsc index.ts\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 编译 src 目录的所有 .ts 文件")]),v._v("\n$ tsc src/*.ts\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 指定编译配置文件")]),v._v("\n$ tsc "),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("--project")]),v._v(" tsconfig.production.json\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 只生成类型声明文件，不编译出 JS 文件")]),v._v("\n$ tsc index.js "),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("--declaration")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("--emitDeclarationOnly")]),v._v("\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 多个 TS 文件编译成单个 JS 文件")]),v._v("\n$ tsc app.ts util.ts "),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("--target")]),v._v(" esnext "),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("--outfile")]),v._v(" index.js\n")])])]),_("h2",{attrs:{id:"命令行参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命令行参数"}},[v._v("#")]),v._v(" 命令行参数")]),v._v(" "),_("p",[v._v("tsc 的命令行参数，大部分与 tsconfig.json 的属性一一对应。")]),v._v(" "),_("p",[v._v("下面只是按照首字母排序，简单罗列出主要的一些参数，详细解释可以参考《tsconfig.json 配置文件》一章。")]),v._v(" "),_("p",[_("code",[v._v("--all")]),v._v("：输出所有可用的参数。")]),v._v(" "),_("p",[_("code",[v._v("--allowJs")]),v._v("：允许 TS 脚本加载 JS 模块，编译时将 JS 一起拷贝到输出目录。")]),v._v(" "),_("p",[_("code",[v._v("--allowUnreachableCode")]),v._v("：如果 TS 脚本有不可能运行到的代码，不报错。")]),v._v(" "),_("p",[_("code",[v._v("--allowUnusedLabels")]),v._v("：如果 TS 脚本有没有用到的标签，不报错。")]),v._v(" "),_("p",[_("code",[v._v("--alwaysStrict")]),v._v("：总是在编译产物的头部添加"),_("code",[v._v("use strict")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("--baseUrl")]),v._v("：指定非相对位置的模块定位的基准 URL。")]),v._v(" "),_("p",[_("code",[v._v("--build")]),v._v("：启用增量编译。")]),v._v(" "),_("p",[_("code",[v._v("--checkJs")]),v._v("：对 JS 脚本进行类型检查。")]),v._v(" "),_("p",[_("code",[v._v("--declaration")]),v._v("：为 TS 脚本生成一个类型生成文件。")]),v._v(" "),_("p",[_("code",[v._v("--declarationDir")]),v._v("：指定生成的类型声明文件的所在目录。")]),v._v(" "),_("p",[_("code",[v._v("--declarationMap")]),v._v("：为"),_("code",[v._v(".d.ts")]),v._v("文件生成 SourceMap 文件。")]),v._v(" "),_("p",[_("code",[v._v("--diagnostics")]),v._v("：构建后输出编译性能信息。")]),v._v(" "),_("p",[_("code",[v._v("--emitBOM")]),v._v("：在编译输出的 UTF-8 文件头部加上 BOM 标志。")]),v._v(" "),_("p",[_("code",[v._v("--emitDeclarationOnly")]),v._v("：只编译输出类型声明文件，不输出 JS 文件。")]),v._v(" "),_("p",[_("code",[v._v("--esModuleInterop")]),v._v("：更容易使用 import 命令加载 CommonJS 模块。")]),v._v(" "),_("p",[_("code",[v._v("--exactOptionalPropertyTypes")]),v._v("：不允许将可选属性设置为"),_("code",[v._v("undefined")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("--experimentalDecorators")]),v._v("：支持早期的装饰器语法。")]),v._v(" "),_("p",[_("code",[v._v("--explainFiles")]),v._v("：输出进行编译的文件信息。")]),v._v(" "),_("p",[_("code",[v._v("--forceConsistentCasingInFileNames")]),v._v("：文件名大小写敏感，默认打开。")]),v._v(" "),_("p",[_("code",[v._v("--help")]),v._v("：输出帮助信息。")]),v._v(" "),_("p",[_("code",[v._v("--importHelpers")]),v._v("：从外部库（比如 tslib）输入辅助函数。")]),v._v(" "),_("p",[_("code",[v._v("--incremental")]),v._v("：启用增量构建。")]),v._v(" "),_("p",[_("code",[v._v("--init")]),v._v("：在当前目录创建一个全新的"),_("code",[v._v("tsconfig.json")]),v._v("文件，里面是预设的设置。")]),v._v(" "),_("p",[_("code",[v._v("--inlineSourceMap")]),v._v("：SourceMap 信息嵌入 JS 文件，而不是生成独立的"),_("code",[v._v(".js.map")]),v._v("文件。")]),v._v(" "),_("p",[_("code",[v._v("--inlineSources")]),v._v("：将 TypeScript 源码作为 SourceMap 嵌入编译出来的 JS 文件。")]),v._v(" "),_("p",[_("code",[v._v("--isolatedModules")]),v._v("：确保每个模块能够独立编译，不依赖其他输入的模块。")]),v._v(" "),_("p",[_("code",[v._v("--jsx")]),v._v("：设置如何处理 JSX 文件。")]),v._v(" "),_("p",[_("code",[v._v("--lib")]),v._v("：设置目标环境需要哪些内置库的类型描述。")]),v._v(" "),_("p",[_("code",[v._v("--listEmittedFiles")]),v._v("：编译后输出编译产物的文件名。")]),v._v(" "),_("p",[_("code",[v._v("--listFiles")]),v._v("：编译过程中，列出读取的文件名。")]),v._v(" "),_("p",[_("code",[v._v("--listFilesOnly")]),v._v("：列出编译所要处理的文件，然后停止编译。")]),v._v(" "),_("p",[_("code",[v._v("--locale")]),v._v("：指定编译时输出的语言，不影响编译结果。")]),v._v(" "),_("p",[_("code",[v._v("--mapRoot")]),v._v("：指定 SourceMap 文件的位置。")]),v._v(" "),_("p",[_("code",[v._v("--module")]),v._v("：指定编译生成的模块格式。")]),v._v(" "),_("p",[_("code",[v._v("--moduleResolution")]),v._v("：指定如何根据模块名找到模块的位置。")]),v._v(" "),_("p",[_("code",[v._v("--moduleSuffixes")]),v._v("：指定模块文件的后缀名。")]),v._v(" "),_("p",[_("code",[v._v("--newLine")]),v._v("：指定编译产物的换行符，可以设为"),_("code",[v._v("crlf")]),v._v("或者"),_("code",[v._v("lf")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("--noEmit")]),v._v("：不生成编译产物，只进行类型检查。")]),v._v(" "),_("p",[_("code",[v._v("--noEmitHelpers")]),v._v("：不在编译产物中加入辅助函数。")]),v._v(" "),_("p",[_("code",[v._v("--noEmitOnError")]),v._v("：一旦报错，就停止编译，没有编译产物。")]),v._v(" "),_("p",[_("code",[v._v("--noFallthroughCasesInSwitch")]),v._v("：Switch 结构的"),_("code",[v._v("case")]),v._v("分支必须有终止语句（比如"),_("code",[v._v("break")]),v._v("）。")]),v._v(" "),_("p",[_("code",[v._v("--noImplicitAny")]),v._v("：类型推断只要为"),_("code",[v._v("any")]),v._v("类型就报错。")]),v._v(" "),_("p",[_("code",[v._v("--noImplicitReturns")]),v._v("：函数内部没有显式返回语句（比如"),_("code",[v._v("return")]),v._v("）就报错。")]),v._v(" "),_("p",[_("code",[v._v("--noImplicitThis")]),v._v("：如果"),_("code",[v._v("this")]),v._v("关键字是"),_("code",[v._v("any")]),v._v("类型，就报错。")]),v._v(" "),_("p",[_("code",[v._v("--noImplicitUseStrict")]),v._v("：编译产生的 JS 文件头部不添加"),_("code",[v._v("use strict")]),v._v("语句。")]),v._v(" "),_("p",[_("code",[v._v("--noResolve")]),v._v("：不进行模块定位，除非该模块是由命令行传入。")]),v._v(" "),_("p",[_("code",[v._v("--noUnusedLocals")]),v._v("：如果有未使用的局部变量就报错。")]),v._v(" "),_("p",[_("code",[v._v("--noUnusedParameters")]),v._v("：如果有未使用的函数参数就报错。")]),v._v(" "),_("p",[_("code",[v._v("--outDir")]),v._v("：指定编译产物的存放目录。")]),v._v(" "),_("p",[_("code",[v._v("--outFile")]),v._v("：所有编译产物打包成一个指定文件。")]),v._v(" "),_("p",[_("code",[v._v("--preserveConstEnums")]),v._v("：不将"),_("code",[v._v("const enum")]),v._v("结构在生成的代码中，替换成常量。")]),v._v(" "),_("p",[_("code",[v._v("--preserveWatchOutput")]),v._v("： watch 模式下不清屏。")]),v._v(" "),_("p",[_("code",[v._v("--pretty")]),v._v("：美化显示编译时的终端输出。这是默认值，但是可以关闭"),_("code",[v._v("--pretty false")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("--project")]),v._v("（或者"),_("code",[v._v("-p")]),v._v("）：指定编译配置文件，或者该文件所在的目录。")]),v._v(" "),_("p",[_("code",[v._v("--removeComments")]),v._v("：编译结果中移除代码注释。")]),v._v(" "),_("p",[_("code",[v._v("--resolveJsonModule")]),v._v("：允许加载 JSON 文件。")]),v._v(" "),_("p",[_("code",[v._v("--rootDir")]),v._v("：指定加载文件所在的根目录，该目录里面的目录结构会被复制到输出目录。")]),v._v(" "),_("p",[_("code",[v._v("--rootDirs")]),v._v("：允许模块定位时，多个目录被当成一个虚拟目录。")]),v._v(" "),_("p",[_("code",[v._v("--skipDefaultLibCheck")]),v._v("：跳过 TypeScript 内置类型声明文件的类型检查。")]),v._v(" "),_("p",[_("code",[v._v("--skipLibCheck")]),v._v("：跳过"),_("code",[v._v(".d.ts")]),v._v("类型声明文件的类型检查。这样可以加快编译速度。")]),v._v(" "),_("p",[_("code",[v._v("--showConfig")]),v._v("：终端输出编译配置信息，而不进行配置。")]),v._v(" "),_("p",[_("code",[v._v("--sourcemap")]),v._v("：为编译产生的 JS 文件生成 SourceMap 文件（.map 文件）。")]),v._v(" "),_("p",[_("code",[v._v("--sourceRoot")]),v._v("：指定 SourceMap 文件里面的 TypeScript 源码根目录位置。")]),v._v(" "),_("p",[_("code",[v._v("--strict")]),v._v("：打开 TypeScript 严格检查模式。")]),v._v(" "),_("p",[_("code",[v._v("--strictBindCallApply")]),v._v("：bind, call、apply 这三个函数的类型，匹配原始函数。")]),v._v(" "),_("p",[_("code",[v._v("--strictFunctionTypes")]),v._v("：如果函数 B 的参数是函数 A 参数的子类型，那么函数 B 不能替代函数 A。")]),v._v(" "),_("p",[_("code",[v._v("--strictNullChecks")]),v._v("：对"),_("code",[v._v("null")]),v._v("和"),_("code",[v._v("undefined")]),v._v("进行严格类型检查。")]),v._v(" "),_("p",[_("code",[v._v("--strictPropertyInitialization")]),v._v("：类的属性必须进行初始值，但是允许在构造函数里面赋值。")]),v._v(" "),_("p",[_("code",[v._v("--suppressExcessPropertyErrors")]),v._v("：关闭对象字面量的多余参数的报错。")]),v._v(" "),_("p",[_("code",[v._v("--target")]),v._v("：指定编译出来的 JS 代码的版本，TypeScript 还会在编译时自动加入对应的库类型声明文件。")]),v._v(" "),_("p",[_("code",[v._v("--traceResolution")]),v._v("：编译时在终端输出模块解析（moduleResolution）的具体步骤。")]),v._v(" "),_("p",[_("code",[v._v("--typeRoots")]),v._v("：设置类型模块所在的目录，替代默认的"),_("code",[v._v("node_modules/@types")]),v._v("。")]),v._v(" "),_("p",[_("code",[v._v("--types")]),v._v("：设置"),_("code",[v._v("typeRoots")]),v._v("目录下需要包括在编译之中的类型模块。")]),v._v(" "),_("p",[_("code",[v._v("--version")]),v._v("：终端输出 tsc 的版本号。")]),v._v(" "),_("p",[_("code",[v._v("--watch")]),v._v("（或者"),_("code",[v._v("-w")]),v._v("）：进入观察模式，只要文件有修改，就会自动重新编译。")])])}),[],!1,null,null,null);_.default=t.exports}}]);