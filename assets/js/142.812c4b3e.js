(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{647:function(t,s,a){"use strict";a.r(s);var e=a(2),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"typescript-基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-基本用法"}},[t._v("#")]),t._v(" TypeScript 基本用法")]),t._v(" "),s("p",[t._v("本章介绍 TypeScript 的一些最基本的语法和用法。")]),t._v(" "),s("h2",{attrs:{id:"类型声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型声明"}},[t._v("#")]),t._v(" 类型声明")]),t._v(" "),s("p",[t._v("TypeScript 代码最明显的特征，就是为 JavaScript 变量加上了类型声明。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("foo")]),t._v("的后面使用冒号，声明了它的类型为"),s("code",[t._v("string")]),t._v("。")]),t._v(" "),s("p",[t._v("类型声明的写法，一律为在标识符后面添加“冒号 + 类型”。函数参数和返回值，也是这样来声明类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面示例中，函数"),s("code",[t._v("toString()")]),t._v("的参数"),s("code",[t._v("num")]),t._v("的类型是"),s("code",[t._v("number")]),t._v("。参数列表的圆括号后面，声明了返回值的类型是"),s("code",[t._v("string")]),t._v("。更详细的介绍，参见《函数》一章。")]),t._v(" "),s("p",[t._v("注意，变量的值应该与声明的类型一致，如果不一致，TypeScript 就会报错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("foo")]),t._v("的类型是字符串，但是赋值为数值"),s("code",[t._v("123")]),t._v("，TypeScript 就报错了。")]),t._v(" "),s("p",[t._v("另外，TypeScript 规定，变量只有赋值后才能使用，否则就会报错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("x")]),t._v("没有赋值就被读取，导致报错。而 JavaScript 允许这种行为，不会报错，没有赋值的变量会返回"),s("code",[t._v("undefined")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"类型推断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[t._v("#")]),t._v(" 类型推断")]),t._v(" "),s("p",[t._v("类型声明并不是必需的，如果没有，TypeScript 会自己推断类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("foo")]),t._v("并没有类型声明，TypeScript 就会推断它的类型。由于它被赋值为一个数值，因此 TypeScript 推断它的类型为"),s("code",[t._v("number")]),t._v("。")]),t._v(" "),s("p",[t._v("后面，如果变量"),s("code",[t._v("foo")]),t._v("更改为其他类型的值，跟推断的类型不一致，TypeScript 就会报错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("foo")]),t._v("的类型推断为"),s("code",[t._v("number")]),t._v("，后面赋值为字符串，TypeScript 就报错了。")]),t._v(" "),s("p",[t._v("TypeScript 也可以推断函数的返回值。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面示例中，函数"),s("code",[t._v("toString()")]),t._v("没有声明返回值的类型，但是 TypeScript 推断返回的是字符串。正是因为 TypeScript 的类型推断，所以函数返回值的类型通常是省略不写的。")]),t._v(" "),s("p",[t._v("从这里可以看到，TypeScript 的设计思想是，类型声明是可选的，你可以加，也可以不加。即使不加类型声明，依然是有效的 TypeScript 代码，只是这时不能保证 TypeScript 会正确推断出类型。由于这个原因，所有 JavaScript 代码都是合法的 TypeScript 代码。")]),t._v(" "),s("p",[t._v("这样设计还有一个好处，将以前的 JavaScript 项目改为 TypeScript 项目时，你可以逐步地为老代码添加类型，即使有些代码没有添加，也不会无法运行。")]),t._v(" "),s("h2",{attrs:{id:"typescript-的编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-的编译"}},[t._v("#")]),t._v(" TypeScript 的编译")]),t._v(" "),s("p",[t._v("JavaScript 的运行环境（浏览器和 Node.js）不认识 TypeScript 代码。所以，TypeScript 项目要想运行，必须先转为 JavaScript 代码，这个代码转换的过程就叫做“编译”（compile）。")]),t._v(" "),s("p",[t._v("TypeScript 官方没有做运行环境，只提供编译器。编译时，会将类型声明和类型相关的代码全部删除，只留下能运行的 JavaScript 代码，并且不会改变 JavaScript 的运行结果。")]),t._v(" "),s("p",[t._v("因此，TypeScript 的类型检查只是编译时的类型检查，而不是运行时的类型检查。一旦代码编译为 JavaScript，运行时就不再检查类型了。")]),t._v(" "),s("h2",{attrs:{id:"值与类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#值与类型"}},[t._v("#")]),t._v(" 值与类型")]),t._v(" "),s("p",[t._v("学习 TypeScript 需要分清楚“值”（value）和“类型”（type）。")]),t._v(" "),s("p",[t._v("“类型”是针对“值”的，可以视为是后者的一个元属性。每一个值在 TypeScript 里面都是有类型的。比如，"),s("code",[t._v("3")]),t._v("是一个值，它的类型是"),s("code",[t._v("number")]),t._v("。")]),t._v(" "),s("p",[t._v("TypeScript 代码只涉及类型，不涉及值。所有跟“值”相关的处理，都由 JavaScript 完成。")]),t._v(" "),s("p",[t._v("这一点务必牢记。TypeScript 项目里面，其实存在两种代码，一种是底层的“值代码”，另一种是上层的“类型代码”。前者使用 JavaScript 语法，后者使用 TypeScript 的类型语法。")]),t._v(" "),s("p",[t._v("它们是可以分离的，TypeScript 的编译过程，实际上就是把“类型代码”全部拿掉，只保留“值代码”。")]),t._v(" "),s("p",[t._v("编写 TypeScript 项目时，不要混淆哪些是值代码，哪些是类型代码。")]),t._v(" "),s("h2",{attrs:{id:"typescript-playground"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-playground"}},[t._v("#")]),t._v(" TypeScript Playground")]),t._v(" "),s("p",[t._v("最简单的 TypeScript 使用方法，就是使用官网的在线编译页面，叫做 "),s("a",{attrs:{href:"http://www.typescriptlang.org/play/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript Playground"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("只要打开这个网页，把 TypeScript 代码贴进文本框，它就会在当前页面自动编译出 JavaScript 代码，还可以在浏览器执行编译产物。如果编译报错，它也会给出详细的报错信息。")]),t._v(" "),s("p",[t._v("这个页面还具有支持完整的 IDE 支持，可以自动语法提示。此外，它支持把代码片段和编译器设置保存成 URL，分享给他人。")]),t._v(" "),s("p",[t._v("本书的示例都建议放到这个页面，进行查看和编译。")]),t._v(" "),s("h2",{attrs:{id:"tsc-编译器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tsc-编译器"}},[t._v("#")]),t._v(" tsc 编译器")]),t._v(" "),s("p",[t._v("TypeScript 官方提供的编译器叫做 tsc，可以将 TypeScript 脚本编译成 JavaScript 脚本。本机想要编译 TypeScript 代码，必须安装 tsc。")]),t._v(" "),s("p",[t._v("根据约定，TypeScript 脚本文件使用"),s("code",[t._v(".ts")]),t._v("后缀名，JavaScript 脚本文件使用"),s("code",[t._v(".js")]),t._v("后缀名。tsc 的作用就是把"),s("code",[t._v(".ts")]),t._v("脚本转变成"),s("code",[t._v(".js")]),t._v("脚本。")]),t._v(" "),s("h3",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("p",[t._v("tsc 是一个 npm 模块，使用下面的命令安装（必须先安装 npm）。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-g")]),t._v(" typescript\n")])])]),s("p",[t._v("上面命令是全局安装 tsc，也可以在项目中将 tsc 安装为一个依赖模块。")]),t._v(" "),s("p",[t._v("安装完成后，检查一下是否安装成功。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者 tsc --version")]),t._v("\n$ tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\nVersion "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.1")]),t._v(".6\n")])])]),s("p",[t._v("上面命令中，"),s("code",[t._v("-v")]),t._v("或"),s("code",[t._v("--version")]),t._v("参数可以输出当前安装的 tsc 版本。")]),t._v(" "),s("h3",{attrs:{id:"帮助信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#帮助信息"}},[t._v("#")]),t._v(" 帮助信息")]),t._v(" "),s("p",[s("code",[t._v("-h")]),t._v("或"),s("code",[t._v("--help")]),t._v("参数输出帮助信息。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-h")]),t._v("\n")])])]),s("p",[t._v("默认情况下，“--help”参数仅显示基本的可用选项。我们可以使用“--all”参数，查看完整的帮助信息。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v("\n")])])]),s("h3",{attrs:{id:"编译脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译脚本"}},[t._v("#")]),t._v(" 编译脚本")]),t._v(" "),s("p",[t._v("安装 tsc 之后，就可以编译 TypeScript 脚本了。")]),t._v(" "),s("p",[s("code",[t._v("tsc")]),t._v("命令后面，加上 TypeScript 脚本文件，就可以将其编译成 JavaScript 脚本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc app.ts\n")])])]),s("p",[t._v("上面命令会在当前目录下，生成一个"),s("code",[t._v("app.js")]),t._v("脚本文件，这个脚本就完全是编译后生成的 JavaScript 代码。")]),t._v(" "),s("p",[s("code",[t._v("tsc")]),t._v("命令也可以一次编译多个 TypeScript 脚本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc file1.ts file2.ts file3.ts\n")])])]),s("p",[t._v("上面命令会在当前目录生成三个 JavaScript 脚本文件"),s("code",[t._v("file1.js")]),t._v("、"),s("code",[t._v("file2.js")]),t._v("、"),s("code",[t._v("file3.js")]),t._v("。")]),t._v(" "),s("p",[t._v("tsc 有很多参数，可以调整编译行为。")]),t._v(" "),s("p",[s("strong",[t._v("（1）--outFile")])]),t._v(" "),s("p",[t._v("如果想将多个 TypeScript 脚本编译成一个 JavaScript 文件，使用"),s("code",[t._v("--outFile")]),t._v("参数。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc file1.ts file2.ts "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--outFile")]),t._v(" app.js\n")])])]),s("p",[t._v("上面命令将"),s("code",[t._v("file1.ts")]),t._v("和"),s("code",[t._v("file2.ts")]),t._v("两个脚本编译成一个 JavaScript 文件"),s("code",[t._v("app.js")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("（2）--outDir")])]),t._v(" "),s("p",[t._v("编译结果默认都保存在当前目录，"),s("code",[t._v("--outDir")]),t._v("参数可以指定保存到其他目录。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc app.ts "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--outDir")]),t._v(" dist\n")])])]),s("p",[t._v("上面命令会在"),s("code",[t._v("dist")]),t._v("子目录下生成"),s("code",[t._v("app.js")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("（3）--target")])]),t._v(" "),s("p",[t._v("为了保证编译结果能在各种 JavaScript 引擎运行，tsc 默认会将 TypeScript 代码编译成很低版本的 JavaScript，即3.0版本（以"),s("code",[t._v("es3")]),t._v("表示）。这通常不是我们想要的结果。")]),t._v(" "),s("p",[t._v("这时可以使用"),s("code",[t._v("--target")]),t._v("参数，指定编译后的 JavaScript 版本。建议使用"),s("code",[t._v("es2015")]),t._v("，或者更新版本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--target")]),t._v(" es2015 app.ts\n")])])]),s("h3",{attrs:{id:"编译错误的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译错误的处理"}},[t._v("#")]),t._v(" 编译错误的处理")]),t._v(" "),s("p",[t._v("编译过程中，如果没有报错，"),s("code",[t._v("tsc")]),t._v("命令不会有任何显示。所以，如果你没有看到任何提示，就表示编译成功了。")]),t._v(" "),s("p",[t._v("如果编译报错，"),s("code",[t._v("tsc")]),t._v("命令就会显示报错信息，但是这种情况下，依然会编译生成 JavaScript 脚本。")]),t._v(" "),s("p",[t._v("举例来说，下面是一个错误的 TypeScript 脚本"),s("code",[t._v("app.ts")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// app.ts")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("foo")]),t._v("是数值类型，赋值为字符串，"),s("code",[t._v("tsc")]),t._v("命令编译这个脚本就会报错。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc app.ts\n\napp.ts:2:1 - error TS2322: Type "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v(" is not assignable to "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  ~~~\n\nFound "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" error "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" app.ts:2\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("tsc")]),t._v("命令输出报错信息，表示变量"),s("code",[t._v("foo")]),t._v("被错误地赋值为字符串。")]),t._v(" "),s("p",[t._v("这种情况下，编译产物"),s("code",[t._v("app.js")]),t._v("还是会照样生成，下面就是编译后的结果。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// app.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以看到，尽管有错，tsc 依然原样将 TypeScript 编译成 JavaScript 脚本。")]),t._v(" "),s("p",[t._v("这是因为 TypeScript 团队认为，编译器的作用只是给出编译错误，至于怎么处理这些错误，那就是开发者自己的判断了。开发者更了解自己的代码，所以不管怎样，编译产物都会生成，让开发者决定下一步怎么处理。")]),t._v(" "),s("p",[t._v("如果希望一旦报错就停止编译，不生成编译产物，可以使用"),s("code",[t._v("--noEmitOnError")]),t._v("参数。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--noEmitOnError")]),t._v(" app.ts\n")])])]),s("p",[t._v("上面命令在报错后，就不会生成"),s("code",[t._v("app.js")]),t._v("。")]),t._v(" "),s("p",[t._v("tsc 还有一个"),s("code",[t._v("--noEmit")]),t._v("参数，只检查类型是否正确，不生成 JavaScript 文件。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--noEmit")]),t._v(" app.ts\n")])])]),s("p",[t._v("上面命令只检查是否有编译错误，不会生成"),s("code",[t._v("app.js")]),t._v("。")]),t._v(" "),s("p",[t._v("tsc 命令的更多参数，详见《tsc 编译器》一章。")]),t._v(" "),s("h3",{attrs:{id:"tsconfig-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json"}},[t._v("#")]),t._v(" tsconfig.json")]),t._v(" "),s("p",[t._v("TypeScript 允许将"),s("code",[t._v("tsc")]),t._v("的编译参数，写在配置文件"),s("code",[t._v("tsconfig.json")]),t._v("。只要当前目录有这个文件，"),s("code",[t._v("tsc")]),t._v("就会自动读取，所以运行时可以不写参数。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc file1.ts file2.ts "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--outFile")]),t._v(" dist/app.js\n")])])]),s("p",[t._v("上面这个命令写成"),s("code",[t._v("tsconfig.json")]),t._v("，就是下面这样。")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file1.ts"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file2.ts"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"compilerOptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"outFile"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dist/app.js"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("有了这个配置文件，编译时直接调用"),s("code",[t._v("tsc")]),t._v("命令就可以了。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc\n")])])]),s("p",[s("code",[t._v("tsconfig.json")]),t._v("的详细介绍，参见《tsconfig.json 配置文件》一章。")]),t._v(" "),s("h2",{attrs:{id:"ts-node-模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts-node-模块"}},[t._v("#")]),t._v(" ts-node 模块")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/TypeStrong/ts-node",target:"_blank",rel:"noopener noreferrer"}},[t._v("ts-node"),s("OutboundLink")],1),t._v(" 是一个非官方的 npm 模块，可以直接运行 TypeScript 代码。")]),t._v(" "),s("p",[t._v("使用时，可以先全局安装它。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-g")]),t._v(" ts-node\n")])])]),s("p",[t._v("安装后，就可以直接运行 TypeScript 脚本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ ts-node script.ts\n")])])]),s("p",[t._v("上面命令运行了 TypeScript 脚本"),s("code",[t._v("script.ts")]),t._v("，给出运行结果。")]),t._v(" "),s("p",[t._v("如果不安装 ts-node，也可以通过 npx 调用它来运行 TypeScript 脚本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ npx ts-node script.ts\n")])])]),s("p",[t._v("上面命令中，"),s("code",[t._v("npx")]),t._v("会在线调用 ts-node，从而在不安装的情况下，运行"),s("code",[t._v("script.ts")]),t._v("。")]),t._v(" "),s("p",[t._v("如果执行 ts-node 命令不带有任何参数，它会提供一个 TypeScript 的命令行 REPL 运行环境，你可以在这个环境中输入 TypeScript 代码，逐行执行。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ ts-node\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("上面示例中，单独运行"),s("code",[t._v("ts-node")]),t._v("命令，会给出一个大于号，这就是 TypeScript 的 REPL 运行环境，可以逐行输入代码运行。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ ts-node\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" const twice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x:string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x + x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" twice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abcabc'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n")])])]),s("p",[t._v("上面示例中，在 TypeScript 命令行 REPL 环境中，先输入一个函数"),s("code",[t._v("twice")]),t._v("，然后调用该函数，就会得到结果。")]),t._v(" "),s("p",[t._v("要退出这个 REPL 环境，可以按下 Ctrl + d，或者输入"),s("code",[t._v(".exit")]),t._v("。")]),t._v(" "),s("p",[t._v("如果只是想简单运行 TypeScript 代码看看结果，ts-node 不失为一个便捷的方法。")])])}),[],!1,null,null,null);s.default=r.exports}}]);