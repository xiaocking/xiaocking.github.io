(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{645:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"any-类型-unknown-类型-never-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#any-类型-unknown-类型-never-类型"}},[t._v("#")]),t._v(" any 类型，unknown 类型，never 类型")]),t._v(" "),s("p",[t._v("本章介绍 TypeScript 的三种特殊类型，它们可以作为学习 TypeScript 类型系统的起点。")]),t._v(" "),s("h2",{attrs:{id:"any-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#any-类型"}},[t._v("#")]),t._v(" any 类型")]),t._v(" "),s("h3",{attrs:{id:"基本含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本含义"}},[t._v("#")]),t._v(" 基本含义")]),t._v(" "),s("p",[t._v("any 类型表示没有任何限制，该类型的变量可以赋予任意类型的值。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("x")]),t._v("的类型是"),s("code",[t._v("any")]),t._v("，就可以被赋值为任意类型的值。")]),t._v(" "),s("p",[t._v("变量类型一旦设为"),s("code",[t._v("any")]),t._v("，TypeScript 实际上会关闭这个变量的类型检查。即使有明显的类型错误，只要句法正确，都不会报错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\nx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("x")]),t._v("的值是一个字符串，但是把它当作函数调用，或者当作对象读取任意属性，TypeScript 编译时都不报错。原因就是"),s("code",[t._v("x")]),t._v("的类型是"),s("code",[t._v("any")]),t._v("，TypeScript 不对其进行类型检查。")]),t._v(" "),s("p",[t._v("由于这个原因，应该尽量避免使用"),s("code",[t._v("any")]),t._v("类型，否则就失去了使用 TypeScript 的意义。")]),t._v(" "),s("p",[t._v("实际开发中，"),s("code",[t._v("any")]),t._v("类型主要适用以下两个场合。")]),t._v(" "),s("p",[t._v("（1）出于特殊原因，需要关闭某些变量的类型检查，就可以把该变量的类型设为"),s("code",[t._v("any")]),t._v("。")]),t._v(" "),s("p",[t._v("（2）为了适配以前老的 JavaScript 项目，让代码快速迁移到 TypeScript，可以把变量类型设为"),s("code",[t._v("any")]),t._v("。有些年代很久的大型 JavaScript 项目，尤其是别人的代码，很难为每一行适配正确的类型，这时你为那些类型复杂的变量加上"),s("code",[t._v("any")]),t._v("，TypeScript 编译时就不会报错。")]),t._v(" "),s("p",[t._v("总之，TypeScript 认为，只要开发者使用了"),s("code",[t._v("any")]),t._v("类型，就表示开发者想要自己来处理这些代码，所以就不对"),s("code",[t._v("any")]),t._v("类型进行任何限制，怎么使用都可以。")]),t._v(" "),s("p",[t._v("从集合论的角度看，"),s("code",[t._v("any")]),t._v("类型可以看成是所有其他类型的全集，包含了一切可能的类型。TypeScript 将这种类型称为“顶层类型”（top type），意为涵盖了所有下层。")]),t._v(" "),s("h3",{attrs:{id:"类型推断问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型推断问题"}},[t._v("#")]),t._v(" 类型推断问题")]),t._v(" "),s("p",[t._v("对于开发者没有指定类型、TypeScript 必须自己推断类型的那些变量，如果无法推断出类型，TypeScript 就会认为该变量的类型是"),s("code",[t._v("any")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，函数"),s("code",[t._v("add()")]),t._v("的参数变量"),s("code",[t._v("x")]),t._v("和"),s("code",[t._v("y")]),t._v("，都没有足够的信息，TypeScript 无法推断出它们的类型，就会认为这两个变量和函数返回值的类型都是"),s("code",[t._v("any")]),t._v("。以至于后面就不再对函数"),s("code",[t._v("add()")]),t._v("进行类型检查了，怎么用都可以。")]),t._v(" "),s("p",[t._v("这显然是很糟糕的情况，所以对于那些类型不明显的变量，一定要显式声明类型，防止被推断为"),s("code",[t._v("any")]),t._v("。")]),t._v(" "),s("p",[t._v("TypeScript 提供了一个编译选项"),s("code",[t._v("noImplicitAny")]),t._v("，打开该选项，只要推断出"),s("code",[t._v("any")]),t._v("类型就会报错。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ tsc "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--noImplicitAny")]),t._v(" app.ts\n")])])]),s("p",[t._v("上面命令使用了"),s("code",[t._v("noImplicitAny")]),t._v("编译选项进行编译，这时上面的函数"),s("code",[t._v("add()")]),t._v("就会报错。")]),t._v(" "),s("p",[t._v("这里有一个特殊情况，即使打开了"),s("code",[t._v("noImplicitAny")]),t._v("，使用"),s("code",[t._v("let")]),t._v("和"),s("code",[t._v("var")]),t._v("命令声明变量，但不赋值也不指定类型，是不会报错的。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("x")]),t._v("和"),s("code",[t._v("y")]),t._v("声明时没有赋值，也没有指定类型，TypeScript 会推断它们的类型为"),s("code",[t._v("any")]),t._v("。这时即使打开了"),s("code",[t._v("noImplicitAny")]),t._v("，也不会报错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("x")]),t._v("的类型推断为"),s("code",[t._v("any")]),t._v("，但是不报错，可以顺利通过编译。")]),t._v(" "),s("p",[t._v("由于这个原因，建议使用"),s("code",[t._v("let")]),t._v("和"),s("code",[t._v("var")]),t._v("声明变量时，如果不赋值，就一定要显式声明类型，否则可能存在安全隐患。")]),t._v(" "),s("p",[s("code",[t._v("const")]),t._v("命令没有这个问题，因为 JavaScript 语言规定"),s("code",[t._v("const")]),t._v("声明变量时，必须同时进行初始化（赋值）。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("const")]),t._v("命令声明的"),s("code",[t._v("x")]),t._v("是不能改变值的，声明时必须同时赋值，否则报错，所以它不存在类型推断为"),s("code",[t._v("any")]),t._v("的问题。")]),t._v(" "),s("h3",{attrs:{id:"污染问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#污染问题"}},[t._v("#")]),t._v(" 污染问题")]),t._v(" "),s("p",[s("code",[t._v("any")]),t._v("类型除了关闭类型检查，还有一个很大的问题，就是它会“污染”其他变量。它可以赋值给其他任何类型的变量（因为没有类型检查），导致其他变量出错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\ny"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toFixed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("x")]),t._v("的类型是"),s("code",[t._v("any")]),t._v("，实际的值是一个字符串。变量"),s("code",[t._v("y")]),t._v("的类型是"),s("code",[t._v("number")]),t._v("，表示这是一个数值变量，但是它被赋值为"),s("code",[t._v("x")]),t._v("，这时并不会报错。然后，变量"),s("code",[t._v("y")]),t._v("继续进行各种数值运算，TypeScript 也检查不出错误，问题就这样留到运行时才会暴露。")]),t._v(" "),s("p",[t._v("污染其他具有正确类型的变量，把错误留到运行时，这就是不宜使用"),s("code",[t._v("any")]),t._v("类型的另一个主要原因。")]),t._v(" "),s("h2",{attrs:{id:"unknown-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unknown-类型"}},[t._v("#")]),t._v(" unknown 类型")]),t._v(" "),s("p",[t._v("为了解决"),s("code",[t._v("any")]),t._v("类型“污染”其他变量的问题，TypeScript 3.0 引入了"),s("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("unknown")]),t._v("类型"),s("OutboundLink")],1),t._v("。它与"),s("code",[t._v("any")]),t._v("含义相同，表示类型不确定，可能是任意类型，但是它的使用有一些限制，不像"),s("code",[t._v("any")]),t._v("那样自由，可以视为严格版的"),s("code",[t._v("any")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("unknown")]),t._v("跟"),s("code",[t._v("any")]),t._v("的相似之处，在于所有类型的值都可以分配给"),s("code",[t._v("unknown")]),t._v("类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("x")]),t._v("的类型是"),s("code",[t._v("unknown")]),t._v("，可以赋值为各种类型的值。这与"),s("code",[t._v("any")]),t._v("的行为一致。")]),t._v(" "),s("p",[s("code",[t._v("unknown")]),t._v("类型跟"),s("code",[t._v("any")]),t._v("类型的不同之处在于，它不能直接使用。主要有以下几个限制。")]),t._v(" "),s("p",[t._v("首先，"),s("code",[t._v("unknown")]),t._v("类型的变量，不能直接赋值给其他类型的变量（除了"),s("code",[t._v("any")]),t._v("类型和"),s("code",[t._v("unknown")]),t._v("类型）。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("v")]),t._v("是"),s("code",[t._v("unknown")]),t._v("类型，赋值给"),s("code",[t._v("any")]),t._v("和"),s("code",[t._v("unknown")]),t._v("以外类型的变量都会报错，这就避免了污染问题，从而克服了"),s("code",[t._v("any")]),t._v("类型的一大缺点。")]),t._v(" "),s("p",[t._v("其次，不能直接调用"),s("code",[t._v("unknown")]),t._v("类型变量的方法和属性。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trim")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("unknown")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("v3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，直接调用"),s("code",[t._v("unknown")]),t._v("类型变量的属性和方法，或者直接当作函数执行，都会报错。")]),t._v(" "),s("p",[t._v("再次，"),s("code",[t._v("unknown")]),t._v("类型变量能够进行的运算是有限的，只能进行比较运算（运算符"),s("code",[t._v("==")]),t._v("、"),s("code",[t._v("===")]),t._v("、"),s("code",[t._v("!=")]),t._v("、"),s("code",[t._v("!==")]),t._v("、"),s("code",[t._v("||")]),t._v("、"),s("code",[t._v("&&")]),t._v("、"),s("code",[t._v("?")]),t._v("）、取反运算（运算符"),s("code",[t._v("!")]),t._v("）、"),s("code",[t._v("typeof")]),t._v("运算符和"),s("code",[t._v("instanceof")]),t._v("运算符这几种，其他运算都会报错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("unknown")]),t._v("类型的变量"),s("code",[t._v("a")]),t._v("进行加法运算会报错，因为这是不允许的运算。但是，进行比较运算就是可以的。")]),t._v(" "),s("p",[t._v("那么，怎么才能使用"),s("code",[t._v("unknown")]),t._v("类型变量呢？")]),t._v(" "),s("p",[t._v("答案是只有经过“类型缩小”，"),s("code",[t._v("unknown")]),t._v("类型变量才可以使用。所谓“类型缩小”，就是缩小"),s("code",[t._v("unknown")]),t._v("变量的类型范围，确保不会出错。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面示例中，"),s("code",[t._v("unknown")]),t._v("类型的变量"),s("code",[t._v("a")]),t._v("经过"),s("code",[t._v("typeof")]),t._v("运算以后，能够确定实际类型是"),s("code",[t._v("number")]),t._v("，就能用于加法运算了。这就是“类型缩小”，即将一个不确定的类型缩小为更明确的类型。")]),t._v(" "),s("p",[t._v("下面是另一个例子。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面示例中，确定变量"),s("code",[t._v("s")]),t._v("的类型为字符串以后，才能调用它的"),s("code",[t._v("length")]),t._v("属性。")]),t._v(" "),s("p",[t._v("这样设计的目的是，只有明确"),s("code",[t._v("unknown")]),t._v("变量的实际类型，才允许使用它，防止像"),s("code",[t._v("any")]),t._v("那样可以随意乱用，“污染”其他变量。类型缩小以后再使用，就不会报错。")]),t._v(" "),s("p",[t._v("总之，"),s("code",[t._v("unknown")]),t._v("可以看作是更安全的"),s("code",[t._v("any")]),t._v("。一般来说，凡是需要设为"),s("code",[t._v("any")]),t._v("类型的地方，通常都应该优先考虑设为"),s("code",[t._v("unknown")]),t._v("类型。")]),t._v(" "),s("p",[t._v("在集合论上，"),s("code",[t._v("unknown")]),t._v("也可以视为所有其他类型（除了"),s("code",[t._v("any")]),t._v("）的全集，所以它和"),s("code",[t._v("any")]),t._v("一样，也属于 TypeScript 的顶层类型。")]),t._v(" "),s("h2",{attrs:{id:"never-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#never-类型"}},[t._v("#")]),t._v(" never 类型")]),t._v(" "),s("p",[t._v("为了保持与集合论的对应关系，以及类型运算的完整性，TypeScript 还引入了“空类型”的概念，即该类型为空，不包含任何值。")]),t._v(" "),s("p",[t._v("由于不存在任何属于“空类型”的值，所以该类型被称为"),s("code",[t._v("never")]),t._v("，即不可能有这样的值。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("never")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面示例中，变量"),s("code",[t._v("x")]),t._v("的类型是"),s("code",[t._v("never")]),t._v("，就不可能赋给它任何值，否则都会报错。")]),t._v(" "),s("p",[s("code",[t._v("never")]),t._v("类型的使用场景，主要是在一些类型运算之中，保证类型运算的完整性，详见后面章节。另外，不可能返回值的函数，返回值的类型就可以写成"),s("code",[t._v("never")]),t._v("，详见《函数》一章。")]),t._v(" "),s("p",[t._v("如果一个变量可能有多种类型（即联合类型），通常需要使用分支处理每一种类型。这时，处理所有可能的类型之后，剩余的情况就属于"),s("code",[t._v("never")]),t._v("类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// never 类型")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面示例中，参数变量"),s("code",[t._v("x")]),t._v("可能是字符串，也可能是数值，判断了这两种情况后，剩下的最后那个"),s("code",[t._v("else")]),t._v("分支里面，"),s("code",[t._v("x")]),t._v("就是"),s("code",[t._v("never")]),t._v("类型了。")]),t._v(" "),s("p",[s("code",[t._v("never")]),t._v("类型的一个重要特点是，可以赋值给任意其他类型。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("never")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Error'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v3"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不报错")]),t._v("\n")])])]),s("p",[t._v("上面示例中，函数"),s("code",[t._v("f()")]),t._v("会抛错，所以返回值类型可以写成"),s("code",[t._v("never")]),t._v("，即不可能返回任何值。各种其他类型的变量都可以赋值为"),s("code",[t._v("f()")]),t._v("的运行结果（"),s("code",[t._v("never")]),t._v("类型）。")]),t._v(" "),s("p",[t._v("为什么"),s("code",[t._v("never")]),t._v("类型可以赋值给任意其他类型呢？这也跟集合论有关，空集是任何集合的子集。TypeScript 就相应规定，任何类型都包含了"),s("code",[t._v("never")]),t._v("类型。因此，"),s("code",[t._v("never")]),t._v("类型是任何其他类型所共有的，TypeScript 把这种情况称为“底层类型”（bottom type）。")]),t._v(" "),s("p",[t._v("总之，TypeScript 有两个“顶层类型”（"),s("code",[t._v("any")]),t._v("和"),s("code",[t._v("unknown")]),t._v("），但是“底层类型”只有"),s("code",[t._v("never")]),t._v("唯一一个。")])])}),[],!1,null,null,null);s.default=e.exports}}]);